import java.time.ZoneId
import java.time.format.DateTimeFormatter
import java.time.format.DateTimeFormatterBuilder
import java.time.format.TextStyle

import static java.time.ZonedDateTime.now
import static java.time.format.DateTimeFormatter.ofLocalizedDate
import static java.time.format.FormatStyle.LONG

// TODO: Refer to https://mrhaki.blogspot.com/2016/01/groovy-goodness-customise-groovydoc.html

// Potential command-line:
//
// groovydoc -d docs -nomainforscripts -windowtitle 'Jenkins Pipeline Scripts' -fileEncoding 'UTF-8' --verbose vars/*.groovy
//

buildscript {
	dependencies {
		localGroovy()
	}
}

plugins {
	id "groovy"
}

repositories {
	jcenter()
}

dependencies {
	// Latest stable release of Groovy - pity we can't just inherit from Gradle
	// C.f. https://stackoverflow.com/a/49120662
	implementation 'org.codehaus.groovy:groovy-all:2.5.7'
}


// This DSL method was added for us by the 'groovy' plugin
groovydoc {

	// These names might need a little work, but they should do for a first release
	docTitle = "Quick-Start Files"
	windowTitle = "The Unofficial Jenkins Pipeline Library"

	source = project.file('vars')
	// TODO: place our own template files at the start of the classpath
	// classpath = '????'
	destinationDir = project.file('docs')

	// TODO: Set up all the GroovyDoc task properties

	// Make sure this task always runs. Gradle's default behavior is so annoying.
	outputs.upToDateWhen { false }

	doFirst {
		DateTimeFormatter theDate = new DateTimeFormatterBuilder()
				.append(ofLocalizedDate(LONG))
				.appendLiteral(' ')
				.appendZoneText(TextStyle.SHORT)
				.toFormatter()

		// Set custom footer for generated documentation.
		footer = """\
        <div class="custom-footer">
            Generated on: ${theDate.format(now(ZoneId.of('America/New_York')))}
        </div>""".stripIndent()
	}

}


